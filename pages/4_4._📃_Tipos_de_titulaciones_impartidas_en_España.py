import streamlit as st
import geopandas as gpd
import pandas as pd
import folium
import json
from streamlit_folium import st_folium
from branca.colormap import LinearColormap

universidad_a_provincia = {
  "Alcal√° de Henares": "Madrid",
  "Alicante": "Alacant/Alicante",
  "Almer√≠a": "Almer√≠a",
  "Aut√≥noma de Barcelona": "Barcelona",
  "Aut√≥noma de Madrid": "Madrid",
  "Barcelona": "Barcelona",
  "Burgos": "Burgos",
  "C√°diz": "C√°diz",
  "Cadiz": "C√°diz",
  "Cantabria": "Cantabria",
  "Carlos III": "Madrid",
  "Castilla-La Mancha": "Ciudad Real",
  "Complutense de Madrid": "Madrid",
  "C√≥rdoba": "C√≥rdoba",
  "Cordoba": "C√≥rdoba",
  "Extremadura": "Badajoz",
  "Girona": "Girona",
  "Granada": "Granada",
  "Huelva": "Huelva",
  "Illes Balears": "Illes Balears",
  "Islas Baleares": "Illes Balears",
  "Ja√©n": "Ja√©n",
  "Jaen": "Ja√©n",
  "Jaume I de Castell√≥n": "Castell√≥/Castell√≥n",
  "La Rioja": "La Rioja",
  "Le√≥n": "Le√≥n",
  "Lleida": "Lleida",
  "M√°laga": "M√°laga",
  "Malaga": "M√°laga",
  "Miguel Hern√°ndez de Elche": "Alacant/Alicante",
  "Murcia (1)": "Murcia",
  "Murcia": "Murcia",
  "Oviedo": "Asturias",
  "Pablo de Olavide": "Sevilla",
  "Pa√≠s Vasco": "Bizkaia",
  "Polit√©cnica de Cartagena (1)": "Murcia",
  "Polit√©cnica de Cartagena": "Murcia",
  "Polit√©cnica de Catalunya": "Barcelona",
  "Polit√©cnica de Catalu√±a": "Barcelona",
  "Polit√©cnica de Madrid": "Madrid",
  "Polit√©cnica de Valencia": "Val√®ncia/Valencia",
  "Cat√≥lica de Valencia":"Val√®ncia/Valencia",
  "Pompeu Fabra": "Barcelona",
  "P√∫blica de Navarra": "Navarra",
  "Rey Juan Carlos": "Madrid",
  "Rovira i Virgili": "Tarragona",
  "Salamanca": "Salamanca",
  "Santiago de Compostela (2)": "A Coru√±a",
  "Santiago de Compostela": "A Coru√±a",
  "Santiago": "A Coru√±a",
  "Sevilla": "Sevilla",
  "U.N.E.D.": "Madrid",
  "Valencia (Est. General)": "Val√®ncia/Valencia",
  "Valladolid": "Valladolid",
  "Zaragoza": "Zaragoza",
  "Abat Oliba-CEU": "Barcelona",
  "Alfonso X El Sabio": "Madrid",
  "Camilo Jos√© Cela": "Madrid",
  "Cat√≥lica S. Antonio de Murcia": "Murcia",
  "Deusto": "Bizkaia",
  "Europea de Madrid": "Madrid",
  "Francisco de Vitoria": "Madrid",
  "Internacional de Catalunya": "Barcelona",
  "Internacional de La Rioja": "La Rioja",
  "Internacional  de La Rioja": "La Rioja",
  "Navarra": "Navarra",
  "Oberta de Catalunya": "Barcelona",
  "Ram√≥n Llull": "Barcelona",
  "San Jorge": "Zaragoza",
  "UDIMA": "Madrid",
  "Vic": "Barcelona",
  "TOTAL": "TOTAL",
  "UNIVERSIDADES P√öBLICAS": "UNIVERSIDADES P√öBLICAS",
  "UNIVERSIDADES PRIVADAS": "UNIVERSIDADES PRIVADAS",
  "UNIVERSIDADES P√∫BLICAS": "UNIVERSIDADES P√öBLICAS",
  "La Laguna": "Canarias",
  "Palmas (Las)": "Canarias",
  "UNIVERSIDADES PUBLICAS": "UNIVERSIDADES PUBLICAS",
  "Coru√±a, A": "A Coru√±a",
  "Coru√±a, La": "A Coru√±a",
  "Vigo": "A Coru√±a",
  "Antonio de Nebrija": "Madrid",
  "Cardenal Herrera-CEU": "Castell√≥/Castell√≥n",
  "Cat√≥lica de Avila": "√Åvila",
  "Cat√≥lica de √Åvila": "√Åvila",
  "Internal. de Catalu√±a": "Barcelona",
  "Mondrag√≥n": "Gipuzkoa",
  "Pontificia Comillas": "Madrid",
  "Pontificia de Salamanca": "Salamanca",
  "SEK": "Madrid",
  "San Pablo-CEU": "Madrid",
  "Europea Miguel de Cervantes": "Valladolid",
  "Internal. de Catalunya": "Barcelona",
  "IE Universidad": "Madrid",
  "Internacional Valenciana": "Val√®ncia/Valencia",
  "Internacional Men√©ndez Pelayo": "Madrid",
  "Internacional de Andaluc√≠a": "Sevilla",
  "Cat√≥lica S.Antonio de Murcia": "Murcia",
  "CENTROS ADSCRITOS A UNIV. PUBLICAS": "CENTROS ADSCRITOS A UNIV. PUBLICAS",
  "Cat√≥lica de √°vila": "√Åvila",
  "InternacionaI Men√©ndez Pelayo": "Val√®ncia/Valencia",
  "Internacional de Catalu√±a": "Barcelona"
}

anyos = [
  "2008-2009", 
  "2009-2010",
  "2010-2011"
]

def anyadirValores(prov, tabla):
  valor = 0
  tablanp = tabla.to_numpy()
  for fila in tablanp:
    if prov in fila:
      valor += fila[1]
  return valor if valor > 0 else 0

@st.cache_data
def loadData():
  directory = './Data/Espanya/Provincias/recintos_provinciales_inspire_peninbal_etrs89.shp'
  provincias = gpd.read_file(directory)
  provincias = provincias.to_crs("EPSG:4326")
  provincias = provincias[['NAMEUNIT', 'geometry']]
  provincias = provincias.rename(columns={'NAMEUNIT': 'Provincia'})

  for anyo in anyos:
    titulaciones = pd.read_excel(f"./Data/Espanya/Titulaciones/Grados por rama {anyo}.xlsx",
                                  sheet_name=0, skiprows=7, usecols=[0,1,2,3,4,5,6],
                                  names=['Universidad', 'Total', 'Ciencias', 'Salud', 'Sociales', 'Arte', 'Ingenieria'])
      
    titulaciones = titulaciones.replace('.', 0)
    
    titulaciones['Provincia'] = titulaciones['Universidad'].apply(lambda x: universidad_a_provincia[x])

    provincias[f'Ciencias{anyo}']    = provincias['Provincia'].apply(lambda x: anyadirValores(x, titulaciones[['Provincia', 'Ciencias']]))
    provincias[f'Salud{anyo}']       = provincias['Provincia'].apply(lambda x: anyadirValores(x, titulaciones[['Provincia', 'Salud']]))
    provincias[f'Sociales{anyo}']    = provincias['Provincia'].apply(lambda x: anyadirValores(x, titulaciones[['Provincia', 'Sociales']]))
    provincias[f'Arte{anyo}']        = provincias['Provincia'].apply(lambda x: anyadirValores(x, titulaciones[['Provincia', 'Arte']]))
    provincias[f'Ingenieria{anyo}']  = provincias['Provincia'].apply(lambda x: anyadirValores(x, titulaciones[['Provincia', 'Ingenieria']]))
    provincias[f'Total{anyo}']       = provincias['Provincia'].apply(lambda x: anyadirValores(x, titulaciones[['Provincia', 'Total']]))
    
    titulacionesMaster = pd.read_excel(f"./Data/Espanya/Titulaciones/Masteres oficiales impartidos {anyo}.xlsx",
                                        sheet_name=0, skiprows=7, usecols=[0,1], names=['Universidad', 'Titulaciones'])
    titulacionesMaster['Provincia'] = titulacionesMaster['Universidad'].apply(lambda x: universidad_a_provincia[x])
    
    provincias[f'Masteres{anyo}'] = provincias['Provincia'].apply(lambda x: anyadirValores(x, titulacionesMaster))

  gdf = gpd.GeoDataFrame(provincias)
  gdf['geometry'] = gdf['geometry'].simplify(0.001, preserve_topology=True)

  return gdf

def main():
  st.set_page_config(
    page_title="Tipo de Titulaciones",
    page_icon="üìÉ",
    layout='wide'
  )

  gdf = loadData()

  typeTit = st.sidebar.selectbox('Tipo de titulacion:', ['M√°ster', 'Grado'])

  if typeTit == 'M√°ster':
    anyo = st.sidebar.selectbox("A√±o:", anyos, 0)

    linear = LinearColormap(["white", "green", "red"], vmin=0, vmax=gdf[f'Masteres{anyo}'].max())
    linear.options = {"position": "top"}
    bounds = gdf.total_bounds

    m = folium.Map(zoom_start=6)
    m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])
    linear.add_to(m)

    geojson = folium.GeoJson(data=json.loads(gdf.to_json()),
                              style_function = lambda feature: 
                              {
                              "fillColor": linear(feature['properties'].get(f'Masteres{anyo}')),
                              "color": "black",
                              "weight": 1,
                              "fillOpacity": 0.5
                              },
                              tooltip=folium.GeoJsonTooltip(
                              fields=["Provincia", f'Masteres{anyo}'],
                              aliases=["Provincia:", "Num. M√°steres:"],
                              localize=True
                            ))

    geojson.add_to(m)

    st.title("M√°steres por provincia en Espanya")
    st.write("Aqu√≠ se muestran la cantidad de programas de master ofertados por provincia. Se da la opci√≥n de " \
    "elegir tres posibles a√±os a visualizar, pero nuevamente no existe gran diferencia entre ellos, cumpliendo que la mayor√≠a se "
    "encuentran en Madrid y Barcelona.")
    st_folium(m, use_container_width=True, height=600, returned_objects=[])

  else:
    anyo = st.sidebar.selectbox("A√±o:", anyos, 0)
    typeGrad = st.sidebar.radio("Tipo de grado:", ['Ciencias', 'Salud', 'Sociales', 'Arte', 'Ingenieria', 'Total'])

    if typeGrad != 'Total':
      linear = LinearColormap(["white", "green", "red"], vmin=0, vmax=gdf[[f'Ciencias{anyo}', f'Salud{anyo}', f'Sociales{anyo}', f'Arte{anyo}', f'Ingenieria{anyo}']].max(axis=1).max())
    else:
      linear = LinearColormap(["white", "green", "red"], vmin=0, vmax=gdf[f'Total{anyo}'].max())
    linear.options = {"position": "top"}
    bounds = gdf.total_bounds

    m = folium.Map(zoom_start=6)
    m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])
    linear.add_to(m)

    typeGrad = typeGrad + anyo

    geojson = folium.GeoJson(data=json.loads(gdf.to_json()),
                              style_function = lambda feature: 
                              {
                              "fillColor": linear(feature['properties'].get(typeGrad)),
                              "color": "black",
                              "weight": 1,
                              "fillOpacity": 0.5
                              },
                              tooltip=folium.GeoJsonTooltip(
                              fields=["Provincia", typeGrad],
                              aliases=["Provincia:", "Num. Grados:"],
                              localize=True
                            ))

    geojson.add_to(m)

    st.title("Grados por provincia en Espanya")
    st.write("Por otro lado, aqu√≠ se pueden ver los grados ofertados, pudiendose elegir por el tipo de los mismos. " \
    "Adem√°s, el rango se ha declarado a partir del m√°ximo de todos los posibles tipos de grados (a excepci√≥n del total), de tal forma que se " \
    "puede tambi√©n comparar las cantidades relativas entro los mismos. Con todo esto, se puede observar que existen m√°s grados " \
    "relacionados con el apartado social y que, nuevamente, se concentran en Madrid y Barcelona.")
    st_folium(m, use_container_width=True, height=600, returned_objects=[])

main()